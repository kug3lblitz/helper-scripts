#!/bin/sh

# ZSH aliases and functions file

source ${HOME}/.git-aliases

alias cat="/usr/share/ccat/ccat -G String='darkgreen' -G Plaintext='blue' -G Comment='darkyellow' -G HTMLTag='purple' -G Literal='darkred' -G Tag='Fuscia'"
alias ls="colorls"
alias xclip="xclip -selection c"

# Print alias function
aman() {

    str=$(cat ${HOME}/.aliases | grep -Poz "(?s)$1\(\).*?\n}")
    if [[ ! -z ${str} ]]; then
        echo ${str}
        return
    fi

    str=$(cat ${HOME}/.aliases | grep -Po "(?<=$1=\").[^\"]*")
    if [[ ! -z ${str} ]]; then
        echo ${str}
        return
    fi

    str=$(cat ${HOME}/.git-aliases | grep -Poz "(?s)$1\(\).*?\n}")
    if [[ ! -z ${str} ]]; then
        echo ${str}
        return
    fi

    str=$(cat ${HOME}/.git-aliases | grep -Po "(?<=$1=\").[^\"]*")
    if [[ ! -z ${str} ]]; then
        echo ${str}
    fi
}

bulk() {
  eval "find ${3} -name '${1}' -exec ${2} {} \;"
}

# change directory to the last directory a file or directory was copied or moved to
cdthere() {
  cd "$(history | grep "mv\|cp" | tail -n1 | grep -oE '[^ ]+$')";
}

# print last errno
eno() {
  _e=$(($(echo $?)))
  [ ${_e} -ne 0 ] && { [ ${_e} -le 134 ] && errno ${_e} || echo "${_e} Unknown error" } || true
}

gui() {
  [ -z "$1" ] && xdg-open . &>/dev/null || xdg-open $1 &>/dev/null;
}

# open a PDF file with the evince viewer
pdf() {
  evince "$@" &>/dev/null & disown;
}

strc() {
  { { grep -src"${3}" ${1} ${2} } || { echo "String not found"; return; } } | grep -v ":0$"
}

strs() {
  { grep -srn"${3}" ${1} ${2} -C ${4:-5} } || echo "String not found"
}

strr() {
  blue=$(tput setaf 4)
  normal=$(tput sgr0)
  find . -type f -printf "\n${blue}%p${normal}:\n" -exec sed --quiet "/${1}/{
  h
  s//${2}/g
  H
  x
  s/\n/ >>> /
  w /dev/fd/2
  x
  }" {} \;
  read -k $'?\nApply changes [Y/n]? ' apply
  if [ "${apply}" = "Y" ] || [ "${apply}" = "y" ]; then
    find . -type f -exec sed -i "s/${1}/${2}/g" {} \;
  fi
}

samefile() {
  cmp -s $1 $2 && echo "$1 and $2 are the same file" || echo "$1 and $2 are different"
}

# compare files to check if they are linked
sameln() {
  _in=$(stat ${1} -c%i)
  [ ${_in} -eq $(stat ${2} -c%i) ] && echo "${1} and ${2} are links (Inode: ${_in})" ||
  echo "${1} and ${2} are not links"
}

unmv() {
  files=$(history | grep "mv" | tail -n1 | awk -F"mv" '{print $(NF)}')
  mv $(echo $files | cut -f3 -d' ') $(echo $files | cut -f2 -d' ')
}

# update system
update() {
  sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y && sudo apt autoclean -y
  cd ${HOME}/.dotfiles && [ "$(parse_git_dirty)" = "$ZSH_THEME_GIT_PROMPT_CLEAN" ] &&
  { git pull; ln -f sublime/* ${HOME}/.config/sublime*/Packages/User/; ln -f zsh/.* ${HOME}/ } ||
  echo "Uncommitted changes found";
  cd -
}

# Python virtual environment
venv() {
  if [ -d .venv ]; then
    source .venv/bin/activate
  else
    read -k $'?No virtual environment found. Create one? [Y/n]: ' create
    if [ "${create}" = "Y" ] || [ "${create}" = "y" ]; then
      python -m venv .venv && source .venv/bin/activate
    fi
  fi
}
