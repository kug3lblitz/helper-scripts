#!/bin/sh

# Zsh aliases for file utilities

bulk() {

  [ $# -eq 0 ] && return 1
  _path="."
  _file=""
  _exec=""
  while [ ! $# -eq 0 ]
  do
    case "$1" in

      -p | --path)
        _path="$2"
        ;;

      -f | --file)
        [ ! -z "${_file}" ] && _file="${_file}-o "
        _file="${_file}-name \"*.$2\" "
        ;;

      -d | --dir)
        [ ! -z "${_file}" ] && _file="${_file}-o "
        _file="${_file}-type d -name \"*$2\" "
        ;;

      -e | --exec)
        _exec="${_exec}-exec $2 {} \; "
        ;;

      -h | --help)
        echo "Convenient wrapper for find utilizing piped commands"
        return 0
        ;;

      *)
        return 1
        ;;

    esac
    shift
    shift
  done

  all_files=$(eval "find ${_path} \( ${_file}\) -print | sort")
  if [ -z "${all_files}" ]; then
    echo "No matching files found"
  else
    echo "Following files would be affected:\n"
    echo ${all_files}
    echo
    read -q "confirm?Continue? [Y/n]: "
    echo
    if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
      [ ! -z "${_exec}" ] && eval "find ${_path} \( ${_file}\) ${_exec}"
    fi
  fi

}

# count files in current directory
countf() {
  [ -z "$1" ] && _dir="." || _dir="$1"
  echo "$(find ${_dir}/* -maxdepth 0 | wc -l) files"
  echo "$(find ${_dir}/* -maxdepth 0 -type d | wc -l) directories"
}

# change directory to the last directory a file or directory was copied or moved to
cdthere() {
  cd "$(history | grep "mv\|cp" | tail -n1 | grep -oE '[^ ]+$')";
}

gui() {
  [ -z "$1" ] && xdg-open . &>/dev/null || xdg-open $1 &>/dev/null;
}

# open a PDF file with the Evince viewer
pdf() {
  evince "$@" &>/dev/null & disown;
}

samefile() {
  cmp -s $1 $2 && echo "$1 and $2 are the same file" || echo "$1 and $2 are different"
}

# compare files to check if they are linked
sameln() {
  _in=$(stat ${1} -c%i)
  [ ${_in} -eq $(stat ${2} -c%i) ] && echo "${1} and ${2} are links (Inode: ${_in})" ||
  echo "${1} and ${2} are not links"
}

unmv() {
  files=$(history | grep "mv" | tail -n1 | awk -F"mv" '{print $(NF)}')
  mv $(echo $files | cut -f3 -d' ') $(echo $files | cut -f2 -d' ')
}

# Python virtual environment
venv() {
  if [ -d .venv ]; then
    source .venv/bin/activate
  else
    read -q "create?No virtual environment found. Create one? [Y/n]: "
    echo
    if [ "${create}" = "Y" ] || [ "${create}" = "y" ]; then
      python -m venv .venv && source .venv/bin/activate
    fi
  fi
}
