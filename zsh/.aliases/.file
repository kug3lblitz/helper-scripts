#!/bin/sh

# Zsh aliases for file utilities

alias cat="/usr/share/ccat/ccat -G String='darkgreen' -G Plaintext='blue' -G Comment='darkyellow' -G HTMLTag='purple' -G Literal='darkred' -G Tag='Fuscia'"
alias xclip="xclip -selection c"

alias ls="colorls"
alias l="ls -lah"
alias la="ls -lAh"
alias ll="ls -lh"
alias lr="ls --report --gs -A"

bulk() {

  [ $# -eq 0 ] && return 1
  _path="."
  _file=""
  _exec=""
  while [ ! $# -eq 0 ]
  do
    case "$1" in

      -p | --path)
        _path="$2"
        ;;

      -n | --name | -f | --file | -d | --dir)

        [ ! -z "${_file}" ] && _file="${_file}-o "
        case "$1" in

          -n | --name)
            _file="${_file}-name \"$2\" "
            ;;

          -f | --file)
            _file="${_file}-name \"*.$2\" "
            ;;

          -d | --dir)
            _file="${_file}-type d -name \"*$2\" "
            ;;

        esac
        ;;

      -e | --exec)
        _exec="${_exec}-exec $2 {} \; "
        ;;

      -h | --help)
        echo "Convenient wrapper for find utilizing piped commands"
        return 0
        ;;

      *)
        return 1
        ;;

    esac
    shift
    shift
  done

  all_files=$(eval "find ${_path} \( ${_file}\) -print | sort")
  if [ -z "${all_files}" ]; then
    echo "No matching files found"
  else
    echo "Following files would be affected:\n"
    echo ${all_files}
    echo
    read -q "confirm?Continue? [Y/n]: "
    echo
    if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
      [ ! -z "${_exec}" ] && eval "find ${_path} \( ${_file}\) ${_exec}"
    fi
  fi

}

# change directory to the last directory a file or directory was copied or moved to
follow() {
  _new_path=$(history | grep -P "\s(mv|cp)\s" | tail -n1 | grep -oE '[^ ]+$' | sed 's@~@'${HOME}'@g')
  [ -f "${_new_path}" ] && cd $(dirname ${_new_path}) || cd ${_new_path}
}

gui() {
  [ -z "$1" ] && xdg-open . &>/dev/null || xdg-open $1 &>/dev/null;
}

# open a PDF file with the Evince viewer
pdf() {
  evince "$@" &>/dev/null & disown;
}

samefile() {
  cmp -s $1 $2 && echo "$1 and $2 are the same file" || echo "$1 and $2 are different"
}

# compare files to check if they are linked
sameln() {
  _in=$(stat ${1} -c%i)
  [ ${_in} -eq $(stat ${2} -c%i) ] && echo "${1} and ${2} are links (Inode: ${_in})" ||
  echo "${1} and ${2} are not links"
}

# Python virtual environment
venv() {
  if [ -d .venv ]; then
    source .venv/bin/activate
  else
    read -q "create?No virtual environment found. Create one? [Y/n]: "
    echo
    if [ "${create}" = "Y" ] || [ "${create}" = "y" ]; then
      python -m venv .venv && source .venv/bin/activate
    fi
  fi
}

unmkdir() {
  _file=$(history | grep "\smkdir\s" | tail -n1 | awk 'NF>1{ print $(NF) }' | sed 's@~@'${HOME}'@g')
  [[ "${_file}" != "${HOME}"* ]] && _file="${PWD}/${_file}"

  read -q "confirm?Remove \"${_file}\"? [Y/n]: "
  echo
  if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
    rm -r ${_file}
  fi
}

uncp() {
  _files=$(history | grep "\scp\s" | tail -n1 | awk -F"cp " '{print $(NF)}' | sed 's@~@'${HOME}'@g')
  _file1=$(echo ${_files} | awk 'NF>1{ print $(NF-1) }')
  _file2=$(echo ${_files} | awk 'NF>1{ print $(NF) }')
  [[ "${_file1}" != "${HOME}"* ]] && _file1="${PWD}/${_file1}"
  [[ "${_file2}" != "${HOME}"* ]] && _file2="${PWD}/${_file2}"

  if [ "${_file1}" != "${_file2}" ]; then

    if [ -d "${_file2}" ]; then
      echo "${_file2} is a directory"
      _file2="${_file2}/$(basename ${_file1})"
    else
      if [ -d "${_file1}" ]; then
        return
      fi
    fi

    read -q "confirm?Remove \"${_file2}\"? [Y/n]: "
    echo
    if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
      rm -r ${_file2}
    fi
  fi
}

unmv() {
  _files=$(history | grep "\smv\s" | tail -n1 | awk -F"mv " '{print $(NF)}' | sed 's@~@'${HOME}'@g')
  _file1=$(echo ${_files} | awk 'NF>1{ print $(NF-1) }')
  _file2=$(echo ${_files} | awk 'NF>1{ print $(NF) }')
  [[ "${_file1}" != "${HOME}"* ]] && _file1="${PWD}/${_file1}"
  [[ "${_file2}" != "${HOME}"* ]] && _file2="${PWD}/${_file2}"

  if [ "${_file1}" != "${_file2}" ]; then

    if [ -d "${_file2}" ]; then
      _file2="${_file2}/$(basename ${_file1})"
    else
      if [ -d "${_file1}" ]; then
        return
      fi
    fi

    [ "${_file2}" = "${_file1}" ] && \
      { echo -e "Original working directory is different from \
current working directory\nTried to move \"${_file1}\" to \"${_file2}\""; return 1 }

    read -q "confirm?Move \"${_file2}\" to \"${_file1}\"? [Y/n]: "
    echo
    if [ "${confirm}" = "Y" ] || [ "${confirm}" = "y" ]; then
      mv ${_file2} ${_file1}
    fi
  fi
}

undo() {
  _last_cmd=$(history | grep -Po "(?<=\s)(mv|cp|mkdir)(?=\s)" | tail -n1)
  case "${_last_cmd}" in

    cp)
      uncp
      ;;

    mv)
      unmv
      ;;

    mkdir)
      unmkdir
      ;;

  esac
}
